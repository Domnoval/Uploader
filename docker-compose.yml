services:
  # PostgreSQL for auth and data persistence (better than SQLite for Docker)
  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: artdrop
      POSTGRES_PASSWORD: artdrop_secret
      POSTGRES_DB: artdrop_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U artdrop"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5


  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
      - ./uploads:/app/uploads
      - ./exports:/app/exports
      - ./public/mockup-scenes:/app/public/mockup-scenes
    environment:
      # Database
      - NODE_ENV=development
      - DATABASE_URL=postgresql://artdrop:artdrop_secret@postgres:5432/artdrop_db
      - REDIS_URL=redis://redis:6379

      # Auth
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=your-development-secret-change-in-production

      # Email (via MailHog)
      - EMAIL_FROM=noreply@artdrop.local
      - EMAIL_SERVER=smtp://mailhog:1025

      # AI Services (OpenAI and Anthropic)
      - ENABLE_GPU=false

      # Optional API Keys (fallbacks)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - REPLICATE_API_TOKEN=${REPLICATE_API_TOKEN}
      - REMOVE_BG_API_KEY=${REMOVE_BG_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}

      # Wix integration
      - WIX_API_URL=${WIX_API_URL}
      - WIX_API_KEY=${WIX_API_KEY}
      - WIX_COLLECTION_ID=${WIX_COLLECTION_ID}

      # S3 Storage (optional)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET=${S3_BUCKET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mailhog:
        condition: service_started
    stdin_open: true
    tty: true

  # MailHog for local email testing (catches magic link emails)
  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025" # SMTP server
      - "8125:8025" # Web UI to view emails
    environment:
      MH_STORAGE: maildir
      MH_MAILDIR_PATH: /maildir
    volumes:
      - mailhog_data:/maildir

  # MinIO for local S3-compatible storage (optional)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    profiles:
      - storage

  # Vector database for embeddings (optional, for advanced search)
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    profiles:
      - ai-advanced

  # Adminer for database management
  adminer:
    image: adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    profiles:
      - dev-tools

  # Jupyter for AI model experimentation
  jupyter:
    image: jupyter/tensorflow-notebook:latest
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./models:/home/jovyan/models
      - ./uploads:/home/jovyan/uploads
    environment:
      - JUPYTER_ENABLE_LAB=yes
    profiles:
      - ai-dev

  # Production build
  app-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    ports:
      - "3001:3000"
    volumes:
      - ./uploads:/app/uploads
      - ./exports:/app/exports
      - ./public/mockup-scenes:/app/public/mockup-scenes
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://artdrop:artdrop_secret@postgres:5432/artdrop_db
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3001}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - EMAIL_FROM=${EMAIL_FROM}
      - EMAIL_SERVER=${EMAIL_SERVER}
    depends_on:
      - postgres
      - redis
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  mailhog_data:
  minio_data:
  qdrant_data: